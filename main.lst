CCS PCM C Compiler, Version 5.101, 43599               18-Sep-22 20:48

               Filename:   E:\Study\College\Cong thuc\Ky 5\Thiet ke he thong nhung\Pic\Do dien ap DC\main.lst

               ROM used:   1290 words (16%)
                           Largest free fragment is 2048
               RAM used:   34 (9%) at main() level
                           56 (15%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   479
0003:  NOP
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA C4,24
000D:  DATA 45,27
000E:  DATA A0,20
000F:  DATA 50,1D
0010:  DATA A0,12
0011:  DATA 31,17
0012:  DATA 34,33
0013:  DATA 00,00
*
0120:  MOVLW  8E
0121:  MOVWF  77
0122:  MOVF   3A,W
0123:  MOVWF  78
0124:  MOVF   39,W
0125:  MOVWF  79
0126:  CLRF   7A
0127:  MOVF   78,F
0128:  BTFSS  03.2
0129:  GOTO   134
012A:  MOVF   79,W
012B:  MOVWF  78
012C:  CLRF   79
012D:  MOVLW  08
012E:  SUBWF  77,F
012F:  MOVF   78,F
0130:  BTFSS  03.2
0131:  GOTO   134
0132:  CLRF   77
0133:  GOTO   13C
0134:  BCF    03.0
0135:  BTFSC  78.7
0136:  GOTO   13B
0137:  RLF    79,F
0138:  RLF    78,F
0139:  DECF   77,F
013A:  GOTO   134
013B:  BCF    78.7
013C:  BCF    0A.3
013D:  BCF    0A.4
013E:  GOTO   4B0 (RETURN)
013F:  MOVF   46,W
0140:  BTFSC  03.2
0141:  GOTO   1AF
0142:  MOVWF  4E
0143:  MOVF   4A,W
0144:  BTFSC  03.2
0145:  GOTO   1AF
0146:  ADDWF  4E,F
0147:  BTFSC  03.0
0148:  GOTO   150
0149:  MOVLW  7F
014A:  SUBWF  4E,F
014B:  BTFSS  03.0
014C:  GOTO   1AF
014D:  BTFSC  03.2
014E:  GOTO   1AF
014F:  GOTO   154
0150:  MOVLW  81
0151:  ADDWF  4E,F
0152:  BTFSC  03.0
0153:  GOTO   1AF
0154:  MOVF   4E,W
0155:  MOVWF  77
0156:  CLRF   78
0157:  CLRF   79
0158:  CLRF   7A
0159:  MOVF   47,W
015A:  MOVWF  52
015B:  BSF    52.7
015C:  MOVF   48,W
015D:  MOVWF  51
015E:  MOVF   49,W
015F:  MOVWF  50
0160:  MOVLW  18
0161:  MOVWF  4E
0162:  CLRF   4F
0163:  BTFSS  50.0
0164:  GOTO   17D
0165:  MOVF   4D,W
0166:  ADDWF  7A,F
0167:  BTFSS  03.0
0168:  GOTO   16F
0169:  INCF   79,F
016A:  BTFSS  03.2
016B:  GOTO   16F
016C:  INCF   78,F
016D:  BTFSC  03.2
016E:  BSF    4F.7
016F:  MOVF   4C,W
0170:  ADDWF  79,F
0171:  BTFSS  03.0
0172:  GOTO   176
0173:  INCF   78,F
0174:  BTFSC  03.2
0175:  BSF    4F.7
0176:  MOVF   4B,W
0177:  MOVWF  48
0178:  BSF    48.7
0179:  MOVF   48,W
017A:  ADDWF  78,F
017B:  BTFSC  03.0
017C:  BSF    4F.7
017D:  RLF    4F,F
017E:  RRF    78,F
017F:  RRF    79,F
0180:  RRF    7A,F
0181:  RRF    52,F
0182:  RRF    51,F
0183:  RRF    50,F
0184:  BCF    03.0
0185:  DECFSZ 4E,F
0186:  GOTO   162
0187:  MOVLW  01
0188:  ADDWF  77,F
0189:  BTFSC  03.0
018A:  GOTO   1AF
018B:  BTFSC  78.7
018C:  GOTO   194
018D:  RLF    52,F
018E:  RLF    7A,F
018F:  RLF    79,F
0190:  RLF    78,F
0191:  DECF   77,F
0192:  BTFSC  03.2
0193:  GOTO   1AF
0194:  BTFSS  52.7
0195:  GOTO   1A5
0196:  INCF   7A,F
0197:  BTFSS  03.2
0198:  GOTO   1A5
0199:  INCF   79,F
019A:  BTFSS  03.2
019B:  GOTO   1A5
019C:  INCF   78,F
019D:  BTFSS  03.2
019E:  GOTO   1A5
019F:  RRF    78,F
01A0:  RRF    79,F
01A1:  RRF    7A,F
01A2:  INCF   77,F
01A3:  BTFSC  03.2
01A4:  GOTO   1AF
01A5:  MOVF   47,W
01A6:  MOVWF  4F
01A7:  MOVF   4B,W
01A8:  XORWF  4F,F
01A9:  BTFSS  4F.7
01AA:  GOTO   1AD
01AB:  BSF    78.7
01AC:  GOTO   1B3
01AD:  BCF    78.7
01AE:  GOTO   1B3
01AF:  CLRF   77
01B0:  CLRF   78
01B1:  CLRF   79
01B2:  CLRF   7A
01B3:  RETURN
01B4:  MOVF   3D,W
01B5:  BTFSC  03.2
01B6:  GOTO   279
01B7:  MOVWF  49
01B8:  MOVF   41,W
01B9:  BTFSC  03.2
01BA:  GOTO   279
01BB:  SUBWF  49,F
01BC:  BTFSS  03.0
01BD:  GOTO   1C3
01BE:  MOVLW  7F
01BF:  ADDWF  49,F
01C0:  BTFSC  03.0
01C1:  GOTO   279
01C2:  GOTO   1C9
01C3:  MOVLW  81
01C4:  SUBWF  49,F
01C5:  BTFSS  03.0
01C6:  GOTO   279
01C7:  BTFSC  03.2
01C8:  GOTO   279
01C9:  MOVF   49,W
01CA:  MOVWF  77
01CB:  CLRF   78
01CC:  CLRF   79
01CD:  CLRF   7A
01CE:  CLRF   48
01CF:  MOVF   3E,W
01D0:  MOVWF  47
01D1:  BSF    47.7
01D2:  MOVF   3F,W
01D3:  MOVWF  46
01D4:  MOVF   40,W
01D5:  MOVWF  45
01D6:  MOVLW  19
01D7:  MOVWF  49
01D8:  MOVF   44,W
01D9:  SUBWF  45,F
01DA:  BTFSC  03.0
01DB:  GOTO   1EC
01DC:  MOVLW  01
01DD:  SUBWF  46,F
01DE:  BTFSC  03.0
01DF:  GOTO   1EC
01E0:  SUBWF  47,F
01E1:  BTFSC  03.0
01E2:  GOTO   1EC
01E3:  SUBWF  48,F
01E4:  BTFSC  03.0
01E5:  GOTO   1EC
01E6:  INCF   48,F
01E7:  INCF   47,F
01E8:  INCF   46,F
01E9:  MOVF   44,W
01EA:  ADDWF  45,F
01EB:  GOTO   21E
01EC:  MOVF   43,W
01ED:  SUBWF  46,F
01EE:  BTFSC  03.0
01EF:  GOTO   207
01F0:  MOVLW  01
01F1:  SUBWF  47,F
01F2:  BTFSC  03.0
01F3:  GOTO   207
01F4:  SUBWF  48,F
01F5:  BTFSC  03.0
01F6:  GOTO   207
01F7:  INCF   48,F
01F8:  INCF   47,F
01F9:  MOVF   43,W
01FA:  ADDWF  46,F
01FB:  MOVF   44,W
01FC:  ADDWF  45,F
01FD:  BTFSS  03.0
01FE:  GOTO   21E
01FF:  INCF   46,F
0200:  BTFSS  03.2
0201:  GOTO   21E
0202:  INCF   47,F
0203:  BTFSS  03.2
0204:  GOTO   21E
0205:  INCF   48,F
0206:  GOTO   21E
0207:  MOVF   42,W
0208:  IORLW  80
0209:  SUBWF  47,F
020A:  BTFSC  03.0
020B:  GOTO   21D
020C:  MOVLW  01
020D:  SUBWF  48,F
020E:  BTFSC  03.0
020F:  GOTO   21D
0210:  INCF   48,F
0211:  MOVF   42,W
0212:  IORLW  80
0213:  ADDWF  47,F
0214:  MOVF   43,W
0215:  ADDWF  46,F
0216:  BTFSS  03.0
0217:  GOTO   1FB
0218:  INCF   47,F
0219:  BTFSS  03.2
021A:  GOTO   1FB
021B:  INCF   48,F
021C:  GOTO   1FB
021D:  BSF    7A.0
021E:  DECFSZ 49,F
021F:  GOTO   221
0220:  GOTO   22C
0221:  BCF    03.0
0222:  RLF    45,F
0223:  RLF    46,F
0224:  RLF    47,F
0225:  RLF    48,F
0226:  BCF    03.0
0227:  RLF    7A,F
0228:  RLF    79,F
0229:  RLF    78,F
022A:  RLF    4A,F
022B:  GOTO   1D8
022C:  BTFSS  4A.0
022D:  GOTO   234
022E:  BCF    03.0
022F:  RRF    78,F
0230:  RRF    79,F
0231:  RRF    7A,F
0232:  RRF    4A,F
0233:  GOTO   237
0234:  DECF   77,F
0235:  BTFSC  03.2
0236:  GOTO   279
0237:  BTFSC  4A.7
0238:  GOTO   260
0239:  BCF    03.0
023A:  RLF    45,F
023B:  RLF    46,F
023C:  RLF    47,F
023D:  RLF    48,F
023E:  MOVF   44,W
023F:  SUBWF  45,F
0240:  BTFSC  03.0
0241:  GOTO   24C
0242:  MOVLW  01
0243:  SUBWF  46,F
0244:  BTFSC  03.0
0245:  GOTO   24C
0246:  SUBWF  47,F
0247:  BTFSC  03.0
0248:  GOTO   24C
0249:  SUBWF  48,F
024A:  BTFSS  03.0
024B:  GOTO   26F
024C:  MOVF   43,W
024D:  SUBWF  46,F
024E:  BTFSC  03.0
024F:  GOTO   257
0250:  MOVLW  01
0251:  SUBWF  47,F
0252:  BTFSC  03.0
0253:  GOTO   257
0254:  SUBWF  48,F
0255:  BTFSS  03.0
0256:  GOTO   26F
0257:  MOVF   42,W
0258:  IORLW  80
0259:  SUBWF  47,F
025A:  BTFSC  03.0
025B:  GOTO   260
025C:  MOVLW  01
025D:  SUBWF  48,F
025E:  BTFSS  03.0
025F:  GOTO   26F
0260:  INCF   7A,F
0261:  BTFSS  03.2
0262:  GOTO   26F
0263:  INCF   79,F
0264:  BTFSS  03.2
0265:  GOTO   26F
0266:  INCF   78,F
0267:  BTFSS  03.2
0268:  GOTO   26F
0269:  INCF   77,F
026A:  BTFSC  03.2
026B:  GOTO   279
026C:  RRF    78,F
026D:  RRF    79,F
026E:  RRF    7A,F
026F:  MOVF   3E,W
0270:  MOVWF  49
0271:  MOVF   42,W
0272:  XORWF  49,F
0273:  BTFSS  49.7
0274:  GOTO   277
0275:  BSF    78.7
0276:  GOTO   27D
0277:  BCF    78.7
0278:  GOTO   27D
0279:  CLRF   77
027A:  CLRF   78
027B:  CLRF   79
027C:  CLRF   7A
027D:  BCF    0A.3
027E:  BCF    0A.4
027F:  GOTO   4D7 (RETURN)
*
02A3:  MOVF   20,W
02A4:  MOVWF  04
02A5:  BCF    03.7
02A6:  BTFSC  21.0
02A7:  BSF    03.7
02A8:  MOVF   46,W
02A9:  MOVWF  00
02AA:  INCF   04,F
02AB:  CLRF   00
02AC:  INCF   20,F
02AD:  BTFSC  03.2
02AE:  INCF   21,F
02AF:  RETURN
02B0:  MOVF   0B,W
02B1:  MOVWF  3A
02B2:  BCF    0B.7
02B3:  BSF    03.5
02B4:  BSF    03.6
02B5:  BSF    0C.7
02B6:  BSF    0C.0
02B7:  NOP
02B8:  NOP
02B9:  BCF    03.5
02BA:  BCF    03.6
02BB:  BTFSC  3A.7
02BC:  BSF    0B.7
02BD:  BTFSC  03.0
02BE:  GOTO   2E7
02BF:  BSF    03.6
02C0:  MOVF   0C,W
02C1:  ANDLW  7F
02C2:  BCF    03.6
02C3:  MOVWF  3A
02C4:  BSF    03.6
02C5:  MOVF   0D,W
02C6:  BCF    03.6
02C7:  MOVWF  3B
02C8:  BSF    03.6
02C9:  MOVF   0F,W
02CA:  BCF    03.6
02CB:  MOVWF  3C
02CC:  MOVF   3A,W
02CD:  MOVWF  46
02CE:  CALL   2A3
02CF:  MOVF   3B,W
02D0:  BSF    03.6
02D1:  MOVWF  0D
02D2:  BCF    03.6
02D3:  MOVF   3C,W
02D4:  BSF    03.6
02D5:  MOVWF  0F
02D6:  BCF    03.6
02D7:  MOVF   0B,W
02D8:  MOVWF  3D
02D9:  BCF    0B.7
02DA:  BSF    03.5
02DB:  BSF    03.6
02DC:  BSF    0C.7
02DD:  BSF    0C.0
02DE:  NOP
02DF:  NOP
02E0:  BCF    03.5
02E1:  BCF    03.6
02E2:  BTFSC  3D.7
02E3:  BSF    0B.7
02E4:  DECFSZ 39,F
02E5:  GOTO   2E7
02E6:  GOTO   306
02E7:  BSF    03.6
02E8:  RLF    0C,W
02E9:  RLF    0E,W
02EA:  ANDLW  7F
02EB:  BCF    03.6
02EC:  MOVWF  3A
02ED:  BSF    03.6
02EE:  MOVF   0D,W
02EF:  BCF    03.6
02F0:  MOVWF  3B
02F1:  BSF    03.6
02F2:  MOVF   0F,W
02F3:  BCF    03.6
02F4:  MOVWF  3C
02F5:  MOVF   3A,W
02F6:  MOVWF  46
02F7:  CALL   2A3
02F8:  MOVF   3B,W
02F9:  BSF    03.6
02FA:  MOVWF  0D
02FB:  BCF    03.6
02FC:  MOVF   3C,W
02FD:  BSF    03.6
02FE:  MOVWF  0F
02FF:  INCF   0D,F
0300:  BTFSC  03.2
0301:  INCF   0F,F
0302:  BCF    03.0
0303:  BCF    03.6
0304:  DECFSZ 39,F
0305:  GOTO   2B0
0306:  BCF    0A.3
0307:  BCF    0A.4
0308:  GOTO   4F0 (RETURN)
0309:  BTFSC  03.1
030A:  GOTO   30E
030B:  MOVLW  4E
030C:  MOVWF  04
030D:  BCF    03.7
030E:  CLRF   77
030F:  CLRF   78
0310:  CLRF   79
0311:  CLRF   7A
0312:  CLRF   4E
0313:  CLRF   4F
0314:  CLRF   50
0315:  CLRF   51
0316:  MOVF   4D,W
0317:  IORWF  4C,W
0318:  IORWF  4B,W
0319:  IORWF  4A,W
031A:  BTFSC  03.2
031B:  GOTO   34C
031C:  MOVLW  20
031D:  MOVWF  52
031E:  BCF    03.0
031F:  RLF    46,F
0320:  RLF    47,F
0321:  RLF    48,F
0322:  RLF    49,F
0323:  RLF    4E,F
0324:  RLF    4F,F
0325:  RLF    50,F
0326:  RLF    51,F
0327:  MOVF   4D,W
0328:  SUBWF  51,W
0329:  BTFSS  03.2
032A:  GOTO   335
032B:  MOVF   4C,W
032C:  SUBWF  50,W
032D:  BTFSS  03.2
032E:  GOTO   335
032F:  MOVF   4B,W
0330:  SUBWF  4F,W
0331:  BTFSS  03.2
0332:  GOTO   335
0333:  MOVF   4A,W
0334:  SUBWF  4E,W
0335:  BTFSS  03.0
0336:  GOTO   346
0337:  MOVF   4A,W
0338:  SUBWF  4E,F
0339:  MOVF   4B,W
033A:  BTFSS  03.0
033B:  INCFSZ 4B,W
033C:  SUBWF  4F,F
033D:  MOVF   4C,W
033E:  BTFSS  03.0
033F:  INCFSZ 4C,W
0340:  SUBWF  50,F
0341:  MOVF   4D,W
0342:  BTFSS  03.0
0343:  INCFSZ 4D,W
0344:  SUBWF  51,F
0345:  BSF    03.0
0346:  RLF    77,F
0347:  RLF    78,F
0348:  RLF    79,F
0349:  RLF    7A,F
034A:  DECFSZ 52,F
034B:  GOTO   31E
034C:  MOVF   4E,W
034D:  MOVWF  00
034E:  INCF   04,F
034F:  MOVF   4F,W
0350:  MOVWF  00
0351:  INCF   04,F
0352:  MOVF   50,W
0353:  MOVWF  00
0354:  INCF   04,F
0355:  MOVF   51,W
0356:  MOVWF  00
0357:  RETURN
0358:  MOVF   04,W
0359:  MOVWF  3E
035A:  MOVF   3D,W
035B:  MOVWF  40
035C:  BTFSC  03.2
035D:  GOTO   377
035E:  MOVF   3C,W
035F:  MOVWF  49
0360:  MOVF   3B,W
0361:  MOVWF  48
0362:  MOVF   3A,W
0363:  MOVWF  47
0364:  MOVF   39,W
0365:  MOVWF  46
0366:  CLRF   4D
0367:  CLRF   4C
0368:  MOVLW  20
0369:  MOVWF  4B
036A:  MOVLW  82
036B:  MOVWF  4A
036C:  CALL   13F
036D:  MOVF   7A,W
036E:  MOVWF  3C
036F:  MOVF   79,W
0370:  MOVWF  3B
0371:  MOVF   78,W
0372:  MOVWF  3A
0373:  MOVF   77,W
0374:  MOVWF  39
0375:  DECFSZ 40,F
0376:  GOTO   35E
0377:  MOVF   3C,W
0378:  MOVWF  49
0379:  MOVF   3B,W
037A:  MOVWF  48
037B:  MOVF   3A,W
037C:  MOVWF  47
037D:  MOVF   39,W
037E:  MOVWF  46
037F:  MOVF   46,W
0380:  SUBLW  B6
0381:  MOVWF  46
0382:  CLRF   7A
0383:  MOVF   47,W
0384:  MOVWF  4A
0385:  BSF    47.7
0386:  BCF    03.0
0387:  RRF    47,F
0388:  RRF    48,F
0389:  RRF    49,F
038A:  RRF    7A,F
038B:  RRF    79,F
038C:  RRF    78,F
038D:  RRF    77,F
038E:  DECFSZ 46,F
038F:  GOTO   386
0390:  BTFSS  4A.7
0391:  GOTO   39D
0392:  COMF   77,F
0393:  COMF   78,F
0394:  COMF   79,F
0395:  COMF   7A,F
0396:  INCF   77,F
0397:  BTFSC  03.2
0398:  INCF   78,F
0399:  BTFSC  03.2
039A:  INCF   79,F
039B:  BTFSC  03.2
039C:  INCF   7A,F
039D:  MOVF   7A,W
039E:  MOVWF  3C
039F:  MOVF   79,W
03A0:  MOVWF  3B
03A1:  MOVF   78,W
03A2:  MOVWF  3A
03A3:  MOVF   77,W
03A4:  MOVWF  39
03A5:  BTFSS  3C.7
03A6:  GOTO   3B4
03A7:  DECF   3E,F
03A8:  BSF    3E.5
03A9:  COMF   39,F
03AA:  COMF   3A,F
03AB:  COMF   3B,F
03AC:  COMF   3C,F
03AD:  INCF   39,F
03AE:  BTFSC  03.2
03AF:  INCF   3A,F
03B0:  BTFSC  03.2
03B1:  INCF   3B,F
03B2:  BTFSC  03.2
03B3:  INCF   3C,F
03B4:  MOVLW  3B
03B5:  MOVWF  45
03B6:  MOVLW  9A
03B7:  MOVWF  44
03B8:  MOVLW  CA
03B9:  MOVWF  43
03BA:  CLRF   42
03BB:  MOVLW  0A
03BC:  MOVWF  40
03BD:  MOVF   3D,W
03BE:  BTFSC  03.2
03BF:  INCF   3E,F
03C0:  BSF    03.1
03C1:  MOVLW  39
03C2:  MOVWF  04
03C3:  BCF    03.7
03C4:  MOVF   3C,W
03C5:  MOVWF  49
03C6:  MOVF   3B,W
03C7:  MOVWF  48
03C8:  MOVF   3A,W
03C9:  MOVWF  47
03CA:  MOVF   39,W
03CB:  MOVWF  46
03CC:  MOVF   45,W
03CD:  MOVWF  4D
03CE:  MOVF   44,W
03CF:  MOVWF  4C
03D0:  MOVF   43,W
03D1:  MOVWF  4B
03D2:  MOVF   42,W
03D3:  MOVWF  4A
03D4:  CALL   309
03D5:  MOVF   78,W
03D6:  MOVF   77,F
03D7:  BTFSS  03.2
03D8:  GOTO   3EC
03D9:  INCF   3D,W
03DA:  SUBWF  40,W
03DB:  BTFSC  03.2
03DC:  GOTO   3EC
03DD:  MOVF   3E,W
03DE:  BTFSC  03.2
03DF:  GOTO   3EE
03E0:  ANDLW  0F
03E1:  SUBWF  40,W
03E2:  BTFSC  03.2
03E3:  GOTO   3E6
03E4:  BTFSC  03.0
03E5:  GOTO   41E
03E6:  BTFSC  3E.7
03E7:  GOTO   41E
03E8:  BTFSC  3E.6
03E9:  GOTO   3EE
03EA:  MOVLW  20
03EB:  GOTO   41A
03EC:  MOVLW  20
03ED:  ANDWF  3E,F
03EE:  BTFSS  3E.5
03EF:  GOTO   3FC
03F0:  BCF    3E.5
03F1:  MOVF   3D,W
03F2:  BTFSS  03.2
03F3:  DECF   3E,F
03F4:  MOVF   77,W
03F5:  MOVWF  3E
03F6:  MOVLW  2D
03F7:  MOVWF  46
03F8:  CALL   2A3
03F9:  MOVF   3E,W
03FA:  MOVWF  77
03FB:  CLRF   3E
03FC:  MOVF   3D,W
03FD:  SUBWF  40,W
03FE:  BTFSS  03.2
03FF:  GOTO   40A
0400:  MOVF   77,W
0401:  MOVWF  3E
0402:  MOVLW  2E
0403:  MOVWF  46
0404:  CALL   2A3
0405:  MOVF   3E,W
0406:  MOVWF  77
0407:  MOVLW  20
0408:  ANDWF  3E,F
0409:  MOVLW  00
040A:  MOVLW  30
040B:  BTFSS  3E.5
040C:  GOTO   41A
040D:  BCF    3E.5
040E:  MOVF   3D,W
040F:  BTFSS  03.2
0410:  DECF   3E,F
0411:  MOVF   77,W
0412:  MOVWF  3E
0413:  MOVLW  2D
0414:  MOVWF  46
0415:  CALL   2A3
0416:  MOVF   3E,W
0417:  MOVWF  77
0418:  CLRF   3E
0419:  MOVLW  30
041A:  ADDWF  77,F
041B:  MOVF   77,W
041C:  MOVWF  46
041D:  CALL   2A3
041E:  BCF    03.1
041F:  MOVF   45,W
0420:  MOVWF  49
0421:  MOVF   44,W
0422:  MOVWF  48
0423:  MOVF   43,W
0424:  MOVWF  47
0425:  MOVF   42,W
0426:  MOVWF  46
0427:  CLRF   4D
0428:  CLRF   4C
0429:  CLRF   4B
042A:  MOVLW  0A
042B:  MOVWF  4A
042C:  CALL   309
042D:  MOVF   7A,W
042E:  MOVWF  45
042F:  MOVF   79,W
0430:  MOVWF  44
0431:  MOVF   78,W
0432:  MOVWF  43
0433:  MOVF   77,W
0434:  MOVWF  42
0435:  DECFSZ 40,F
0436:  GOTO   3C0
0437:  BCF    0A.3
0438:  BCF    0A.4
0439:  GOTO   4FD (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20000000)
.................... #FUSES HS
.................... #include <lcd.h>
.................... #define _lcd_h_
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #use delay(clock=4000000)
*
0014:  MOVLW  3D
0015:  MOVWF  04
0016:  BCF    03.7
0017:  MOVF   00,W
0018:  BTFSC  03.2
0019:  GOTO   028
001A:  MOVLW  01
001B:  MOVWF  78
001C:  CLRF   77
001D:  DECFSZ 77,F
001E:  GOTO   01D
001F:  DECFSZ 78,F
0020:  GOTO   01C
0021:  MOVLW  4A
0022:  MOVWF  77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  GOTO   026
0026:  DECFSZ 00,F
0027:  GOTO   01A
0028:  RETURN
.................... void lcd_init(void);             // Ham dung de khoi dong C.LCD.
.................... byte lcd_read_byte(void);         // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD.
.................... byte lcd_read_nibble(void);         // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD.
.................... void lcd_send_byte(byte address, byte n);   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address).
.................... void lcd_send_nibble(byte n);      // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD.
.................... void lcd_gotoxy(byte x, byte y);   // Ham thiet lap vi tri ghi tren C.LCD.
.................... char lcd_getc(byte x, byte y);      // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD.
.................... void lcd_putc(char c);              // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD.
.................... void lcd_clear(void);
.................... void lcd_puts(char *str);
.................... // Khai bao bien.
.................... // Dinh nghia cac thong so.
.................... //!#define LCD_RS_PIN         PIN_B1   // Cac ket noi C.LCD voi vi dieu khien.
.................... //!#define LCD_RW_PIN         PIN_B2
.................... //!#define LCD_ENABLE_PIN     PIN_B3
.................... //!#define LCD_DATA4          PIN_B4
.................... //!#define LCD_DATA5          PIN_B5
.................... //!#define LCD_DATA6          PIN_B6
.................... //!#define LCD_DATA7          PIN_B7 
.................... 
.................... //!#define LCD_RS_PIN         PIN_C0   // Cac ket noi C.LCD voi vi dieu khien.
.................... //!#define LCD_RW_PIN         PIN_C1
.................... //!#define LCD_ENABLE_PIN     PIN_C2
.................... //!#define LCD_DATA4          PIN_C3
.................... //!#define LCD_DATA5          PIN_C4
.................... //!#define LCD_DATA6          PIN_C5
.................... //!#define LCD_DATA7          PIN_C6
.................... //!
.................... 
.................... #define NULL 0
.................... #define LCD_RS_PIN      PIN_D1   // Cac ket noi C.LCD voi vi dieu khien.
.................... #define LCD_RW_PIN      PIN_D2
.................... #define LCD_ENABLE_PIN  PIN_D3
.................... #define LCD_DATA4       PIN_D4
.................... #define LCD_DATA5       PIN_D5
.................... #define LCD_DATA6       PIN_D6
.................... #define LCD_DATA7       PIN_D7  
.................... 
.................... #define lcd_output_enable(x)   output_bit(LCD_ENABLE_PIN, x)   // Lenh dieu khien chan LCD_ENABLE_PIN.
.................... #define lcd_enable_tris()   output_drive(LCD_ENABLE_PIN)
.................... 
.................... #define lcd_output_rs(x)   output_bit(LCD_RS_PIN, x)   // Lenh dieu khien chan LCD_RS_PIN.
.................... #define lcd_rs_tris()      output_drive(LCD_RS_PIN)
.................... 
.................... #define lcd_output_rw(x)   output_bit(LCD_RW_PIN, x)   // Lenh dieu khien chan LCD_RW_PIN
.................... #define lcd_rw_tris()      output_drive(LCD_RW_PIN)
.................... 
.................... #define lcd_line_one   0x00    // Dia chi RAM C.LCD cho hang thu 1.
.................... #define lcd_line_two   0x40    // Dia chi RAM C.LCD cho hang thu 2.
.................... #define lcd_line_three   0x14
.................... #define lcd_line_four   0x54
.................... #define LCD_TYPE 0x02           // Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines
.................... 
.................... // Dinh nghia cac hang so.
.................... byte const LCD_INIT_STRING[4] = {0x28 | (LCD_TYPE << 2), 0x0C, 0x01, 0x06};
....................         // Cac byte nay can thiet de gui toi C.LCD, dung de khoi dong cau hinh hoat dong cho C.LCD.
....................       // Byte 1: 0x20 | (LCD_TYPE << 2) - So bit du lieu giao tiep (DL), so dong hien thi (N), kieu ky tu (F).
....................       //         0 0 1 DL N F x x (DL: Data Length, N: Number Line, F: Font).
....................          // Truong hop 1: 0x20 - 4 bit / 1 dong / 5 x 7.
....................          // Truong hop 2: 0x24 - 4 bit / 1 dong / 5 x 10.
....................          // Truong hop 3: 0x28 - 4 bit / 2 dong / 5 x 7.
....................       // Byte 2: 0x0C - Dieu khien hien thi (Bat hien thi, tat con tro, tat nhap nhay con tro).
....................       //         0 0 0 0 1 D C B (D: Display, C: Cursor, B: Blink).
....................       // Byte 3: 0x01 - Xoa hien thi va tra con tro ve dau dong.
....................       // Byte 4: 0x06 - Dat che do dau vao (Che do tang dia chi, tat dich chuyen hien thi).
....................       //         0 0 0 0 0 1 I/D S (I/D: Increment/Decrement, S: Shift).
....................       // Byte 5: .... - Doi con tro / hien thi.
....................       //         0 0 0 1 S/C R/L x x (S/C: Screen/Cursor, R/L: Right/Left).
.................... 
.................... // ***************************************************
.................... void lcd_init(void)    // Ham dung de khoi dong C.LCD.
.................... {
.................... // Khai bao bien.
.................... byte i;
.................... // Dinh nghia ham.
.................... output_drive(LCD_DATA4);   // Thiet lap chan port (Data) o che do ngo ra.
*
00DC:  BSF    03.5
00DD:  BCF    08.4
.................... output_drive(LCD_DATA5);
00DE:  BCF    08.5
.................... output_drive(LCD_DATA6);
00DF:  BCF    08.6
.................... output_drive(LCD_DATA7);
00E0:  BCF    08.7
.................... 
.................... lcd_enable_tris();         // Thiet lap chan port (Control: EN, RS, RW) o che do ngo ra.
00E1:  BCF    08.3
.................... lcd_rs_tris();
00E2:  BCF    08.1
.................... lcd_rw_tris();
00E3:  BCF    08.2
.................... 
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh.
00E4:  BCF    03.5
00E5:  BCF    08.1
00E6:  BSF    03.5
00E7:  BCF    08.1
.................... lcd_output_rw(0);         // RW = 0 - Ghi thong tin vao C.LCD.
00E8:  BCF    03.5
00E9:  BCF    08.2
00EA:  BSF    03.5
00EB:  BCF    08.2
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
00EC:  BCF    03.5
00ED:  BCF    08.3
00EE:  BSF    03.5
00EF:  BCF    08.3
.................... 
.................... delay_ms(15);   // Tao thoi gian tre 15ms (Thoi gian de LCD tu reset khi moi duoc cap nguon).
00F0:  MOVLW  0F
00F1:  BCF    03.5
00F2:  MOVWF  3D
00F3:  CALL   014
.................... 
.................... for(i=1;i<=3;i++)         // Doan lenh khoi dong C.LCD o che do 8 bit duoc thuc hien 3 lan lien tiep
00F4:  MOVLW  01
00F5:  MOVWF  39
00F6:  MOVF   39,W
00F7:  SUBLW  03
00F8:  BTFSS  03.0
00F9:  GOTO   102
....................    {                  // tai thoi diem ban dau (de dam bao cho C.LCD hoat dong on dinh trong 
....................    lcd_send_nibble(0x03);    // truong hop khi cung cap nguon cho C.LCD ma dien ap nguon tang len cham).
00FA:  MOVLW  03
00FB:  MOVWF  44
00FC:  CALL   029
....................    delay_ms(5);         // RS = 0, RW = 0, D7 - D4 = 0011 (0x03) -> DL = 1 (8 bit).
00FD:  MOVLW  05
00FE:  MOVWF  3D
00FF:  CALL   014
0100:  INCF   39,F
0101:  GOTO   0F6
....................    }                  // Do co BF (Busy Flag) chua kiem tra duoc trong thoi diem nay, nen phai 
....................                      // thuc hien 3 lan (xem luu do khoi dong C.LCD cua nha san xuat).
.................... 
.................... lcd_send_nibble(0x02);      // Doan lenh khoi dong C.LCD o che do 4 bit. Tu luc nay thi 4 bit cao duoc ghi
0102:  MOVLW  02
0103:  MOVWF  44
0104:  CALL   029
....................                      // ra truoc tien, sau do la 4 bit thap.
....................                      // RS = 0, RW = 0, D7 - D4 = 0010 (0x02) -> DL = 0 (4 bit).
....................                      // Co BF (Busy Flag) co the bat dau kiem tra duoc tu luc nay.
.................... 
.................... for(i=0;i<=3;i++)
0105:  CLRF   39
0106:  MOVF   39,W
0107:  SUBLW  03
0108:  BTFSS  03.0
0109:  GOTO   113
....................    lcd_send_byte(0,LCD_INIT_STRING[i]);   // Goi ham truyen thong tin (lenh) sang C.LCD.
010A:  MOVF   39,W
010B:  CALL   004
010C:  MOVWF  3A
010D:  CLRF   41
010E:  MOVF   3A,W
010F:  MOVWF  42
0110:  CALL   085
0111:  INCF   39,F
0112:  GOTO   106
0113:  BCF    0A.3
0114:  BCF    0A.4
0115:  GOTO   488 (RETURN)
.................... }                                 // Lenh: Thiet lap cau hinh hoat dong cho C.LCD.
.................... 
.................... // ***************************************************
.................... byte lcd_read_byte(void)   // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD.
.................... {
.................... // Khai bao bien.
.................... byte low,high;
.................... // Dinh nghia ham.
.................... output_float(LCD_DATA4);   // Thiet lap chan port o che do ngo vao.
*
0088:  BSF    08.4
.................... output_float(LCD_DATA5);
0089:  BSF    08.5
.................... output_float(LCD_DATA6);
008A:  BSF    08.6
.................... output_float(LCD_DATA7);
008B:  BSF    08.7
.................... 
.................... lcd_output_rw(1);         // RW = 1 - Doc thong tin tu C.LCD.
008C:  BCF    03.5
008D:  BSF    08.2
008E:  BSF    03.5
008F:  BCF    08.2
....................                   // Tien hanh doc 4 bit cao cua thong tin tu C.LCD.
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
0090:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD.
0091:  BCF    03.5
0092:  BSF    08.3
0093:  BSF    03.5
0094:  BCF    08.3
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
0095:  NOP
.................... high = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit cao).
0096:  BCF    03.5
0097:  CALL   054
0098:  MOVF   78,W
0099:  MOVWF  44
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
009A:  BCF    08.3
009B:  BSF    03.5
009C:  BCF    08.3
....................                   // Tien hanh doc 4 bit thap cua thong tin tu C.LCD.
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
009D:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD.
009E:  BCF    03.5
009F:  BSF    08.3
00A0:  BSF    03.5
00A1:  BCF    08.3
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00A2:  NOP
.................... low = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit thap).
00A3:  BCF    03.5
00A4:  CALL   054
00A5:  MOVF   78,W
00A6:  MOVWF  43
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
00A7:  BCF    08.3
00A8:  BSF    03.5
00A9:  BCF    08.3
.................... 
.................... output_drive(LCD_DATA4);   // Thiet lap chan port o che do ngo ra.
00AA:  BCF    08.4
.................... output_drive(LCD_DATA5);
00AB:  BCF    08.5
.................... output_drive(LCD_DATA6);
00AC:  BCF    08.6
.................... output_drive(LCD_DATA7);
00AD:  BCF    08.7
.................... 
.................... return((high<<4) | low);   // Tra ve ket qua du lieu (dang 8 bit).
00AE:  BCF    03.5
00AF:  SWAPF  44,W
00B0:  MOVWF  77
00B1:  MOVLW  F0
00B2:  ANDWF  77,F
00B3:  MOVF   77,W
00B4:  IORWF  43,W
00B5:  MOVWF  78
.................... }
.................... 
.................... // ***************************************************
.................... byte lcd_read_nibble(void)   // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD.
*
0054:  CLRF   45
.................... {
.................... // Khai bao bien.
.................... byte n = 0x00;   // Mac dinh gia tri ban dau cho noi chua se thong tin.
.................... // Dinh nghia ham.
.................... n |= input(LCD_DATA4);         // Doc lan luot cac bit tu bus du lieu.
0055:  BSF    03.5
0056:  BSF    08.4
0057:  MOVLW  00
0058:  BCF    03.5
0059:  BTFSC  08.4
005A:  MOVLW  01
005B:  IORWF  45,F
.................... n |= input(LCD_DATA5) << 1;
005C:  BSF    03.5
005D:  BSF    08.5
005E:  MOVLW  00
005F:  BCF    03.5
0060:  BTFSC  08.5
0061:  MOVLW  01
0062:  MOVWF  77
0063:  BCF    03.0
0064:  RLF    77,F
0065:  MOVF   77,W
0066:  IORWF  45,F
.................... n |= input(LCD_DATA6) << 2;
0067:  BSF    03.5
0068:  BSF    08.6
0069:  MOVLW  00
006A:  BCF    03.5
006B:  BTFSC  08.6
006C:  MOVLW  01
006D:  MOVWF  77
006E:  RLF    77,F
006F:  RLF    77,F
0070:  MOVLW  FC
0071:  ANDWF  77,F
0072:  MOVF   77,W
0073:  IORWF  45,F
.................... n |= input(LCD_DATA7) << 3;
0074:  BSF    03.5
0075:  BSF    08.7
0076:  MOVLW  00
0077:  BCF    03.5
0078:  BTFSC  08.7
0079:  MOVLW  01
007A:  MOVWF  77
007B:  RLF    77,F
007C:  RLF    77,F
007D:  RLF    77,F
007E:  MOVLW  F8
007F:  ANDWF  77,F
0080:  MOVF   77,W
0081:  IORWF  45,F
.................... 
.................... return(n);   // Tra ve ket qua doc duoc (data = 0000 xxxx).
0082:  MOVF   45,W
0083:  MOVWF  78
0084:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_send_byte(byte address, byte n)   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address).
.................... {                                 // address = 0: Lenh / 1: Du lieu.
....................                                  // byte = Thong tin can gui (8 bit).
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham.  
.................... lcd_output_rs(0);      // RS = 0 - Databus = Bus lenh.
0085:  BCF    08.1
0086:  BSF    03.5
0087:  BCF    08.1
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong).
*
00B6:  MOVF   78,W
00B7:  MOVWF  43
00B8:  BTFSS  43.7
00B9:  GOTO   0BC
00BA:  BSF    03.5
00BB:  GOTO   088
.................... lcd_output_rs(address);   // RS = address - Databus = Bus lenh/du lieu.
00BC:  MOVF   41,F
00BD:  BTFSS  03.2
00BE:  GOTO   0C1
00BF:  BCF    08.1
00C0:  GOTO   0C2
00C1:  BSF    08.1
00C2:  BSF    03.5
00C3:  BCF    08.1
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00C4:  NOP
.................... lcd_output_rw(0);      // RW = 0 - Ghi thong tin vao C.LCD.
00C5:  BCF    03.5
00C6:  BCF    08.2
00C7:  BSF    03.5
00C8:  BCF    08.2
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00C9:  NOP
.................... lcd_output_enable(0);   // EN = 0 - Cam truy xuat C.LCD.
00CA:  BCF    03.5
00CB:  BCF    08.3
00CC:  BSF    03.5
00CD:  BCF    08.3
.................... lcd_send_nibble(n >> 4);   // Goi ham truyen 4 bit cao sang C.LCD.
00CE:  BCF    03.5
00CF:  SWAPF  42,W
00D0:  MOVWF  43
00D1:  MOVLW  0F
00D2:  ANDWF  43,F
00D3:  MOVF   43,W
00D4:  MOVWF  44
00D5:  CALL   029
.................... lcd_send_nibble(n & 0x0F);   // Goi ham truyen 4 bit thap sang C.LCD.
00D6:  MOVF   42,W
00D7:  ANDLW  0F
00D8:  MOVWF  43
00D9:  MOVWF  44
00DA:  CALL   029
00DB:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_send_nibble(byte n)   // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD.
.................... {                        // n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap.
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham. 
.................... output_bit(LCD_DATA4, bit_test(n, 0));   // Xuat lan luot cac bit len bus du lieu.
*
0029:  BTFSC  44.0
002A:  GOTO   02D
002B:  BCF    08.4
002C:  GOTO   02E
002D:  BSF    08.4
002E:  BSF    03.5
002F:  BCF    08.4
.................... output_bit(LCD_DATA5, bit_test(n, 1));
0030:  BCF    03.5
0031:  BTFSC  44.1
0032:  GOTO   035
0033:  BCF    08.5
0034:  GOTO   036
0035:  BSF    08.5
0036:  BSF    03.5
0037:  BCF    08.5
.................... output_bit(LCD_DATA6, bit_test(n, 2));
0038:  BCF    03.5
0039:  BTFSC  44.2
003A:  GOTO   03D
003B:  BCF    08.6
003C:  GOTO   03E
003D:  BSF    08.6
003E:  BSF    03.5
003F:  BCF    08.6
.................... output_bit(LCD_DATA7, bit_test(n, 3));
0040:  BCF    03.5
0041:  BTFSC  44.3
0042:  GOTO   045
0043:  BCF    08.7
0044:  GOTO   046
0045:  BSF    08.7
0046:  BSF    03.5
0047:  BCF    08.7
....................     
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
0048:  NOP
.................... lcd_output_enable(1);   // Tao xung ghi thong tin vao C.LCD.
0049:  BCF    03.5
004A:  BSF    08.3
004B:  BSF    03.5
004C:  BCF    08.3
.................... delay_us(2);         // Tao tre 2 chu ky (t=2us voi fosc=4MHz).
004D:  GOTO   04E
.................... lcd_output_enable(0);   // Tao xung ghi thong tin vao LCD - EN = 1->0 (High to Low).
004E:  BCF    03.5
004F:  BCF    08.3
0050:  BSF    03.5
0051:  BCF    08.3
0052:  BCF    03.5
0053:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_gotoxy(byte x, byte y)   // Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1).
.................... {
.................... // Khai bao bien.
.................... byte address;
.................... // Dinh nghia ham.  
.................... if(y==1)               // Kiem tra vi tri truy xuat thuoc hang 2.
*
0280:  DECFSZ 3E,W
0281:  GOTO   284
....................    address=lcd_line_one;      // Nap dia chi RAM cua hang 2. 
0282:  CLRF   3F
0283:  GOTO   298
.................... else if(y==2)      // Neu vi tri truy xuat thuoc hang 1.
0284:  MOVF   3E,W
0285:  SUBLW  02
0286:  BTFSS  03.2
0287:  GOTO   28B
....................    address=lcd_line_two;      // Nap dia chi RAM cua hang 1.
0288:  MOVLW  40
0289:  MOVWF  3F
028A:  GOTO   298
.................... else if(y==3)
028B:  MOVF   3E,W
028C:  SUBLW  03
028D:  BTFSS  03.2
028E:  GOTO   292
....................    address=lcd_line_three;     
028F:  MOVLW  14
0290:  MOVWF  3F
0291:  GOTO   298
.................... else if(y==4)
0292:  MOVF   3E,W
0293:  SUBLW  04
0294:  BTFSS  03.2
0295:  GOTO   298
....................    address=lcd_line_four;   
0296:  MOVLW  54
0297:  MOVWF  3F
.................... 
.................... address+=x-1;               // Ghep dia chi cot vao dia chi tong quat (address). address = address + (x-1).      
0298:  MOVLW  01
0299:  SUBWF  3D,W
029A:  ADDWF  3F,F
....................                         // Ta qui uoc: Goc tren ben trai co toa do la 1,1 -> Cot dau tien la Cot 1
....................                         // (x-1) vi C.LCD qui uoc cot dau tien co dia chi la 0.
.................... lcd_send_byte(0,0x80|address);   // Goi ham truyen thong tin (lenh) sang C.LCD.
029B:  MOVF   3F,W
029C:  IORLW  80
029D:  MOVWF  40
029E:  CLRF   41
029F:  MOVF   40,W
02A0:  MOVWF  42
02A1:  CALL   085
02A2:  RETURN
.................... }                        // Lenh: Thiet lap dia chi DDRAM cua C.LCD (addresss).   
.................... 
.................... // ***************************************************
.................... char lcd_getc(byte x, byte y)   // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD.
.................... {
.................... // Khai bao bien.
.................... char value;
.................... // Dinh nghia ham.  
.................... lcd_gotoxy(x,y);            // Xac dinh toa do C.LCD can truy xuat.
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong).
.................... lcd_output_rs(1);         // RS = 1 - Databus = Bus du lieu.
.................... value = lcd_read_byte();   // Doc ve tu C.LCD.
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh.
.................... 
.................... return(value);      // Tra ve ma ky tu tai toa do yeu cau.
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_putc(char c)   // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD.
.................... {
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham. 
.................... switch (c)
*
044F:  MOVF   3C,W
0450:  XORLW  0C
0451:  BTFSC  03.2
0452:  GOTO   45A
0453:  XORLW  06
0454:  BTFSC  03.2
0455:  GOTO   462
0456:  XORLW  02
0457:  BTFSC  03.2
0458:  GOTO   468
0459:  GOTO   46D
....................    {
....................    case '\f':     // Chuc nang xoa hien thi.
....................       lcd_send_byte(0,0x01);   // Goi ham truyen thong tin (lenh) sang C.LCD.
045A:  CLRF   41
045B:  MOVLW  01
045C:  MOVWF  42
045D:  CALL   085
....................       delay_ms(2);         // Lenh: Xoa hien thi tren man hinh C.LCD (0x01).
045E:  MOVLW  02
045F:  MOVWF  3D
0460:  CALL   014
....................       break;
0461:  GOTO   472
....................    case '\n':       // Chuc nang bat dau hang thu 2.
....................       lcd_gotoxy(1,0x02);     // Goi ham truyen thong tin (du lieu) sang C.LCD.   
0462:  MOVLW  01
0463:  MOVWF  3D
0464:  MOVLW  02
0465:  MOVWF  3E
0466:  CALL   280
....................       break;
0467:  GOTO   472
....................     case '\b':       // Chuc nang lui ve 1 vi tri.
....................       lcd_send_byte(0,0x10);    // Goi ham truyen thong tin (lenh) sang C.LCD. 
0468:  CLRF   41
0469:  MOVLW  10
046A:  MOVWF  42
046B:  CALL   085
....................       break;               // Lenh: Doi con tro sang trai (0x10).
046C:  GOTO   472
....................    default:       // Chuc nang hien thi ky tu c tai vi tri ke tiep tren C.LCD.
....................       lcd_send_byte(1,c);     // Goi ham truyen thong tin (du lieu) sang C.LCD.
046D:  MOVLW  01
046E:  MOVWF  41
046F:  MOVF   3C,W
0470:  MOVWF  42
0471:  CALL   085
....................       break;
....................    }
.................... }
.................... 
.................... void lcd_clear(void)
.................... {
....................    lcd_send_byte(0,0x01);  //Goi ham truyen thong tin (lenh) sang C.LCD
*
0116:  CLRF   41
0117:  MOVLW  01
0118:  MOVWF  42
0119:  CALL   085
....................    delay_ms(2);            //Lenh: Xoa hien thi tren man hinh C.LCD (0x01)
011A:  MOVLW  02
011B:  MOVWF  3D
011C:  CALL   014
011D:  BCF    0A.3
011E:  BCF    0A.4
011F:  GOTO   489 (RETURN)
.................... }
.................... 
.................... void lcd_puts(char *str)
.................... {
....................    while(*str != NULL)
*
043A:  MOVF   3A,W
043B:  MOVWF  7A
043C:  MOVF   39,W
043D:  MOVWF  04
043E:  BCF    03.7
043F:  BTFSC  7A.0
0440:  BSF    03.7
0441:  MOVF   00,F
0442:  BTFSC  03.2
0443:  GOTO   476
....................    {
....................       lcd_putc(*str);
0444:  MOVF   3A,W
0445:  MOVWF  7A
0446:  MOVF   39,W
0447:  MOVWF  04
0448:  BCF    03.7
0449:  BTFSC  7A.0
044A:  BSF    03.7
044B:  MOVF   00,W
044C:  MOVWF  3B
044D:  MOVF   3B,W
044E:  MOVWF  3C
....................       str++;
*
0472:  INCF   39,F
0473:  BTFSC  03.2
0474:  INCF   3A,F
0475:  GOTO   43A
....................    }
0476:  BCF    0A.3
0477:  BCF    0A.4
0478:  GOTO   501 (RETURN)
.................... }
.................... // ***************************************************   
.................... 
.................... 
.................... 
.................... 
.................... void main()
0479:  MOVF   03,W
047A:  ANDLW  1F
047B:  MOVWF  03
047C:  CLRF   21
047D:  CLRF   20
047E:  BSF    03.5
047F:  BSF    1F.0
0480:  BSF    1F.1
0481:  BSF    1F.2
0482:  BCF    1F.3
0483:  MOVLW  07
0484:  MOVWF  1C
0485:  BCF    03.7
.................... {
....................    lcd_init();
0486:  BCF    03.5
0487:  GOTO   0DC
....................    lcd_clear();
0488:  GOTO   116
....................    
....................    int16 adc;
....................    float voltage;
....................    char string[17];
....................    SETUP_ADC(ADC_CLOCK_INTERNAL);
0489:  BSF    03.5
048A:  BCF    1F.6
048B:  BCF    03.5
048C:  BSF    1F.6
048D:  BSF    1F.7
048E:  BSF    03.5
048F:  BSF    1F.7
0490:  BCF    03.5
0491:  BSF    1F.0
....................    SETUP_ADC_PORTS(ALL_ANALOG);
0492:  BSF    03.5
0493:  BCF    1F.0
0494:  BCF    1F.1
0495:  BCF    1F.2
0496:  BCF    1F.3
....................    SET_ADC_CHANNEL(5); //RE0 AN5
0497:  MOVLW  28
0498:  MOVWF  78
0499:  BCF    03.5
049A:  MOVF   1F,W
049B:  ANDLW  C7
049C:  IORWF  78,W
049D:  MOVWF  1F
....................    
....................    while(TRUE)
....................    {
....................       //TODO: User Code
....................       adc =read_adc();
049E:  BSF    1F.2
049F:  BTFSC  1F.2
04A0:  GOTO   49F
04A1:  MOVF   1E,W
04A2:  MOVWF  79
04A3:  BSF    03.5
04A4:  MOVF   1E,W
04A5:  MOVWF  78
04A6:  MOVF   79,W
04A7:  BCF    03.5
04A8:  MOVWF  23
04A9:  MOVF   78,W
04AA:  MOVWF  22
....................       /*
....................          cu 5V thi doc gia tri max adc la 1023
....................          cu xV thi doc gia tri adc
....................          vay dien ap x = 5*adc/1023
....................       */
....................       voltage = 5.0f*adc/1023.0f;
04AB:  MOVF   23,W
04AC:  MOVWF  3A
04AD:  MOVF   22,W
04AE:  MOVWF  39
04AF:  GOTO   120
04B0:  CLRF   49
04B1:  CLRF   48
04B2:  MOVLW  20
04B3:  MOVWF  47
04B4:  MOVLW  81
04B5:  MOVWF  46
04B6:  MOVF   7A,W
04B7:  MOVWF  4D
04B8:  MOVF   79,W
04B9:  MOVWF  4C
04BA:  MOVF   78,W
04BB:  MOVWF  4B
04BC:  MOVF   77,W
04BD:  MOVWF  4A
04BE:  CALL   13F
04BF:  MOVF   7A,W
04C0:  MOVWF  3C
04C1:  MOVF   79,W
04C2:  MOVWF  3B
04C3:  MOVF   78,W
04C4:  MOVWF  3A
04C5:  MOVF   77,W
04C6:  MOVWF  39
04C7:  MOVF   7A,W
04C8:  MOVWF  40
04C9:  MOVF   79,W
04CA:  MOVWF  3F
04CB:  MOVF   78,W
04CC:  MOVWF  3E
04CD:  MOVF   77,W
04CE:  MOVWF  3D
04CF:  CLRF   44
04D0:  MOVLW  C0
04D1:  MOVWF  43
04D2:  MOVLW  7F
04D3:  MOVWF  42
04D4:  MOVLW  88
04D5:  MOVWF  41
04D6:  GOTO   1B4
04D7:  MOVF   7A,W
04D8:  MOVWF  27
04D9:  MOVF   79,W
04DA:  MOVWF  26
04DB:  MOVF   78,W
04DC:  MOVWF  25
04DD:  MOVF   77,W
04DE:  MOVWF  24
....................       //voltage = ceil(voltage); //lam tron dien ap
....................       
....................       lcd_gotoxy(1,1);
04DF:  MOVLW  01
04E0:  MOVWF  3D
04E1:  MOVWF  3E
04E2:  CALL   280
....................       sprintf(string,"DIEN AP: %1.4f",voltage);
04E3:  CLRF   21
04E4:  MOVLW  28
04E5:  MOVWF  20
04E6:  MOVLW  0C
04E7:  BSF    03.6
04E8:  MOVWF  0D
04E9:  MOVLW  00
04EA:  MOVWF  0F
04EB:  BCF    03.0
04EC:  MOVLW  09
04ED:  BCF    03.6
04EE:  MOVWF  39
04EF:  GOTO   2B0
04F0:  MOVLW  89
04F1:  MOVWF  04
04F2:  MOVF   27,W
04F3:  MOVWF  3C
04F4:  MOVF   26,W
04F5:  MOVWF  3B
04F6:  MOVF   25,W
04F7:  MOVWF  3A
04F8:  MOVF   24,W
04F9:  MOVWF  39
04FA:  MOVLW  04
04FB:  MOVWF  3D
04FC:  GOTO   358
....................       //%1.yf voi y la bao nhieu chu so thap phan sau dau phay
....................       lcd_puts(string);
04FD:  CLRF   3A
04FE:  MOVLW  28
04FF:  MOVWF  39
0500:  GOTO   43A
....................       delay_ms(500);
0501:  MOVLW  02
0502:  MOVWF  39
0503:  MOVLW  FA
0504:  MOVWF  3D
0505:  CALL   014
0506:  DECFSZ 39,F
0507:  GOTO   503
0508:  GOTO   49E
....................    }
.................... 
.................... }
0509:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
